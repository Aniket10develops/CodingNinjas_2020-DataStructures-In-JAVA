
public class Solution {
    
	public static LinkedListNode<Integer> getMiddle(LinkedListNode<Integer> head) {
		if (head==null) {
			return head;
		}
		LinkedListNode<Integer> slow = head;
		LinkedListNode<Integer> fast = head;
		while (fast.next != null && fast.next.next != null) {
			slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	public static LinkedListNode<Integer> sortedMerge(LinkedListNode<Integer> head1, LinkedListNode<Integer> head2) {
		LinkedListNode<Integer> ans = null;
		if (head1 == null) {
			return head2;
		}
		if (head2 == null) {
			return head1;
		}
		if(head1.data <= head2.data) {
			ans = head1;
			ans.next = sortedMerge(head1.next, head2);
		} else {
			ans = head2;
			ans.next = sortedMerge(head1, head2.next);
		}
		return ans;
	}
	public static LinkedListNode<Integer> mergeSort(LinkedListNode<Integer> head) {
		if (head==null || head.next==null) {
			return head;
		}
		LinkedListNode<Integer> middle = getMiddle(head);
		LinkedListNode<Integer> nextMiddle = middle.next;
		middle.next = null;
		LinkedListNode<Integer> left = mergeSort(head);
		LinkedListNode<Integer> right = mergeSort(nextMiddle);
		LinkedListNode<Integer> sortedList = sortedMerge(left, right);
		return sortedList;
	}

}
